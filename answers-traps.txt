Question1:
    Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?
Answer:
    1) Regesters 'ax' contain arguments to functions.
    2) Register 'a2' holds 13 in main's call to printf.

Question2:
    Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)
Answer:
    1)  52:	fce080e7      jalr	-50(ra) # 1c <f>
    2)  34:	fd0080e7      jalr	-48(ra) # 0 <g>

Question3:
    At what address is the function printf located?
Answer：
    6c:	9cc080e7        jalr	-1588(ra) # a34 <printf>

Question4：
    What value is in the register ra just after the jalr to printf in main?
Answer:
    0x1

Question5:
    Run the following code.

	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
      
    What is the output? Here's an ASCII table(http://web.cs.mun.ca/~michael/c/ascii-table.html) that maps bytes to characters.
    The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?
Answer:
    "HE110 World"
    0x00646c73
    No

Question6:
    In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?

	printf("x=%d y=%d", 3);
Answer:
    The 4-bytes after the address of const 3. This would happen due to undefined memory.